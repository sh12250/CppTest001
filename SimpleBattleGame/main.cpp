#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>
#include <windows.h>

using namespace std;

const int MAXPERCENT = 100;

int monsterKill = 0;
int playerLevel = 0;
int playerAtk = 10;
int playerMaxHp = 50;
int playerCurHp = playerMaxHp;
int roadIncount = 0;

int mobMaxHp = 0;
int mobCurHp = 0;
int mobAtk = 0;

/*

게임 루프 활용해서  ( 배틀 시스템 + 걷기 시스템 )
플레이어의 최대 HP는 50, 플레이어가 6번 길을 걸으면 게임 종료

사용자 랜덤하게 진행한다 (길, 강, 산)
30퍼 확률로 길  -> 랜덤값 리롤( 행선지 )
20퍼 확률로 강  -> 랜덤값 리롤
50퍼 확률로 산  -> 전투 발생 -> 랜덤값 리롤

전투에 대해서   -> 몬스터 등장. 전투는 자동 진행
			  -> 몬스터의 체력, 공격력, 플레이어의 공격력은 커스텀
			  -> 전투는 40퍼 확률로 발생
			  -> 60퍼 확률로 플레이어 회복

*/

// 게임 설정
// 마을로 돌아가는 길
// 세계수의 미궁식으로 진행
// 길을 찾아 마을에 도착하면 해피 엔딩
// 그전에 죽으면 배드 엔딩



int RandomPercent();
void RandomRoute(), Graphics(int ), IsTown(), IsBattle(), Battle(), MonsterStat(), PlayerAtk(), PlayerHeal(), PlayerLevel(), InfoUiPrint(int ), BattleUiPrint(int , int ), TurnWaitUiPrint(int );



int main() {
	// Graphics(1);

	printf("게임 시작! \n");

	_getch();
	system("cls");

	while (true) {
		if (roadIncount == 7) {
			break;
		}

		RandomRoute();
	}

	//InfoUiPrint(5, 5);
	//BattleUiPrint(5, 5, 2);

	return 0;
}

// 전투 출력
void Battle() {
	MonsterStat();

	int firstTurn = 1;

	while (true) {
		// 플레이어가 죽었을 경우
		if (playerCurHp < 0) {
			playerCurHp = 0;
			Graphics(5);

			break;
		}
		// 몬스터가 죽었을 경우
		if (mobCurHp < 0) {
			mobCurHp = 0;
			monsterKill += 1;
			if (monsterKill == 5) {
				PlayerLevel();
			}

			break;
		}



		// 그래픽 출력
		// Graphics(4);


		// 정보 출력
		if (firstTurn == 1) {
			InfoUiPrint(mobMaxHp);
			firstTurn == 0;
		}



		// 전투 진행
		BattleUiPrint(mobMaxHp, mobAtk);



		// 다음 턴 진행 전 정보 출력
		TurnWaitUiPrint(mobMaxHp);


		// 다음 턴 진행
		printf("다음 턴을 진행... \n");
		_getch();
		system("cls");
	}
}


// 몬스터 스탯 생성
void MonsterStat() {
	int mobStat = (RandomPercent() % 16) + 15;
	mobMaxHp = mobStat;
	mobCurHp = mobMaxHp;
	mobStat = (RandomPercent() % 5) + 2;
	mobAtk = mobStat;
}

// 다음 턴 진행 전 출력
void TurnWaitUiPrint(int maxhp) {
	printf("들개 ( %d / %d ) \n", mobCurHp, maxhp);
	printf("============================================================\n");

	printf("\n\n\n\n\n");

	if (mobCurHp < 0) {

	}
	else if (playerCurHp < (playerMaxHp / 2)) {
		printf("힘든 싸움이 될 것 같다...\n");
	}
	else {
		printf("이길 수 있을 것 같다 \n");
	}

	printf("\n\n\n\n\n");

	printf("============================================================\n");
	printf("나 ( %d / %d ) \n", playerCurHp, playerMaxHp);

	printf("\n\n다음 턴을 진행... \n");
	_getch();
	system("cls");
}

// 전투 출력
void BattleUiPrint(int maxhp, int atk) {
	printf("들개 ( %d / %d ) \n", mobCurHp, maxhp);
	printf("============================================================\n");

	printf("\n들개의 공격! %d의 데미지를 입었다", atk);
	playerCurHp -= atk;

	printf("\n\n\n\n\n\n\n\n");

	PlayerAtk();
	PlayerHeal();
	printf("============================================================\n");
	printf("나 ( %d / %d ) \n", playerCurHp, playerMaxHp);



	_getch();
	system("cls");
}

// 싸우기 전 정보 출력
void InfoUiPrint(int maxhp) {
	printf("들개 ( %d / %d ) \n", mobCurHp, maxhp);
	printf("============================================================\n");

	printf("\n\n\n\n\n");

	printf("싸울 수 밖에 없는 것 같다... \n");

	printf("\n\n\n\n\n");

	printf("============================================================\n");
	printf("나 ( %d / %d ) \n", playerCurHp, playerMaxHp);

	_getch();
	system("cls");
}


// 플레이어의 공격
void PlayerAtk() {
	const int CRIRATE = 30;
	const int CRIATKRATE = 2;
	int isCri = RandomPercent();
	int damage = playerAtk;

	printf("확률 : %d \n", isCri);


	if(isCri > MAXPERCENT- CRIRATE){
		damage *= CRIATKRATE;
		printf("급소에 맞았다! %d의 데미지를 입혔다 \n", damage);

		mobCurHp -= damage;
	}
	else {
		printf("공격! %d의 데미지를 입혔다 \n", damage);

		mobCurHp -= damage;
	}
}

// 플레이어 스탯 증가
void PlayerLevel() {
	monsterKill = 0;
	playerLevel += 1;
	playerAtk += 2;
	playerMaxHp += 5;
}

// 그래픽 출력
void Graphics(int graphicnum) {
	switch (graphicnum) {
		// 길
	case 1:	
		cout 
		<< "@@@@@@@@@@@@#######$##$!..;############$########=##@#@@@@@@@" << endl
		<< "@@@@@@@@@@#@###$=#$$$$=:.:$###########@############@@@@@@@@@" << endl
		<< "@@@@@@@@@@@@###==#$$$$$!.;#########$##$######$#####@@@@@@@@@" << endl
		<< "@@@@@@@@@@@@#$$###$$$#$$$$$#####$##$#####$$###$#=#@@@@@@@@@@" << endl
		<< "@@@@@@@@@@@##$=###$#$$$$$$#######$$$######$#$$$######@@@@@@@" << endl
		<< "@#@@@@@$@@##==$@####$$#$=$$########$$$$#####$##@#$#$@@@@@#@@" << endl
		<< "##@#@@@@@###$#$#==$#$$#==$$######$$$$$$####$$#######@@@@#@@@" << endl
		<< "#@##@@@@@$#$#=$@#$$=$$$*=$$$$$$$$$$$$$$$#$$$$###@@@@#@@###@@" << endl
		<< "##@$#@@##=$$#*$@####$$$==$$$###$$$$$$$####$$$=###@@##@@*=@@@" << endl
		<< "#@@$$$@=##$=@#@###$#$$#$=$$#$$$$$###$$##$$$$=$$$#@#$=$@;*#@@" << endl
		<< "#@@$@=@##$*#@@#########$$$$$$###$###$$##$$=$##*$##$##=@#@@@@" << endl
		<< "###$@#####$#@##$##@###$$$$$$$$##$##$$$#######@@##=$###@@#@#@" << endl
		<< "###$@@#=##$####$$$@@#$$$$##$$$##$$$$$$#####@#@@##=#@@#@#@@#@" << endl
		<< "##@####$#######$#$###$$######$####$$####$##@@@###$##@@#$###@" << endl
		<< "####$##$###$##$$$=$#==$$==#$$$$$$$==$==$===$###$$$$$$$$=$=##" << endl
		<< "=$$$$##$##$##$==**$=!*=$*!========****!==**!**==*=*!**!$!;#=" << endl
		<< "$===$$#$$$=$$=**;!==!*=$**=======$=!!!!=***!!!!**=*!!!!$;;#*" << endl
		<< "======#===**$=****==!;;;!*=*===$$$=*!!!==*****!!*=!!;!!$;;#=" << endl
		<< "=====$#$****$===**==!;:-~:;!**=$===****$==****!**=*!;*!#!!#$" << endl
		<< "====*=#=*=**$===!!****;----~:;*==**====#$==*=***=$*!*==#*=#$" << endl
		<< "===*!!$*!**==**=:::::::---~;;:!*****===$#$=$=*==$$===$$$=$@#" << endl
		<< "==**!!$!;;***!**~-,-------:!!!!!!*****=$$==$====#$$$$###$$@$" << endl
		<< "$$=*!!#!;;!*!;!*;;::~-----~~~~~:;!!!!**==**===**#$==$###$#@#" << endl
		<< "$*$*!*#=;;!!!;!*!!!!!;:------,,-~~~~:;!!!!!!***======#####@#" << endl
		<< "==*!*!#=!!;;!!!!*!****!:~-----,,,,---~~~:;;!;!**===*=$##$$@#" << endl
		<< "*=*!*!=!!!;;!!!********!:~---------------~:;!****=**==$$$$#@" << endl
		<< "==*!;;;!!!!!!!!!!!***!;:~-----------------~:!****=*===$$$$$@" << endl
		<< "==!!!!;!!!!!!!!!!!:::~~--------------------~;*****=====$$$$@" << endl
		<< "$***!!!!**!!!**!;~-----------------------~~~;*****======$=$#" << endl
		<< "=*=**!!!******;:~-----------------------~~~:!*****=====$=$$$" << endl
		<< "===****!;::~~~--------------------------~~~;****=*==$==$$$$$" << endl
		<< "=====***;:~------------------------------~:!*=======$=$=$$$$" << endl
		<< "$==*$;:~~--------------------------------~;**=======$$$=$$$$" << endl
		<< "#==;:~~---------------------------------~:**==========$$=$$$" << endl
		<< "=;:~~~---------------------------------~~;**==============$$" << endl
		<< ";::~~---~~-----------------------------~:!**=======*=*===$$#" << endl
		<< "::~~~~~~~~~-~~------------------------~~~;*======*======$$##" << endl
		<< ":::~~~~~~~~~~~~----------------------~~~;!**======*=$=$=$#$#" << endl
		<< ";::~~~~~~~~~~~~~----------------------~~~:!=========$$$$####" << endl
		<< ";;::~~~~~~~~~~~~~~~~------------------~~:;!**==$$$=*===$$$$#" << endl;

		break;
		// 강
	case 2:	cout 
		<< ",,,,,,,,,,,,,,,,,,,,,,,,,,.,,...,,,.,..............  ...,:;;" << endl
		<< ".,.,,,,,,,,,,,,,,,,,,............................,~--;!;~!;!" << endl
		<< "~....,,,,,,,,,,,,,..............................~!!!!!;;:!;!" << endl
		<< "~:....,,,,,,,,,,,............................:.-;!*;-:!!!!*!" << endl
		<< "!!::,...,,,,,,,,...........................,-;;;;**!!!;!;!;;" << endl
		<< "!!!~:,..,,,,,,............................:!;*!:!!!!!!!;;!;;" << endl
		<< "===~~:-...,..............................~!**!*;*==*!=;;:*!;" << endl
		<< "$$$-~~::...,,....................  ....,:;!*=!!!=$*!!!=;;!:*" << endl
		<< "$$=$~:::;- .......................,,...!;;!=*!!===$===*!;;;;" << endl
		<< "!#$$**:~;:~  .........................,;;;*=*!*!=**==$!:*;**" << endl
		<< "$$$$==~:!~:~     .............,,~-~::;:!*;!=!;==$#*$;;*;!**!" << endl
		<< "$$#$**!*$;*:-. .. ..........,::::~:-~~*!=!!=*!**:;*==*=**!=*" << endl
		<< "####**$!!!*::;-.  .........,::::~~~*:;**!*!=*!***!*=*!*!**=*" << endl
		<< "####**$*!=*!!*:-.........-~::::~:::**;**!***!;*=*;=*===$!===" << endl
		<< "=@#@=!=*!$#;;!:;;.......~~::*~;!;!;!*=;;**==*=!*!=!*$$$*!$==" << endl
		<< "@@#@$*$*=$$*;;:::;:-::~::;*;=;!!;*!!***;!*;;=*!;!!*$##$=*$$=" << endl
		<< "=$#@$$#$$#$=!!;!!!*;:~;;;!==!!**;!*=;!$!!*=!=*!=!*==###$$$==" << endl
		<< ":~*::*!:*$$$*$;=$$*=;:******!***!*==;;*=!====$=$!!=$#####$!=" << endl
		<< "*~:!;:;~:**$=$;*=$$#$******!!***;=$***==$*==*!$$$=!$$$**;;;!" << endl
		<< ":;~~;;:;:;=*!=;;==$#$;!!*!!!;;!;!*!*;!;;;;;!!!*!;!;;;;!!!*=!" << endl
		<< "!::!:;**!~;*;*:;!!!!;:;;**!:~~::*!:*;**!*!!!;!!***!**!*=*!!!" << endl
		<< "*=*====:!*-;;:~~~-----~~:;!!;-,.-....-:::::;;!!;;*!;!!*!;**=" << endl
		<< "**=~--:::~-;=~:---------~~::;!!!!:--,,,,,....,,,,--~-~~::!;!" << endl
		<< "=**;,~*#==;=*;*:-----~~~~~~:;;;;;!;!!;:;!::---,--~--,~--,-,-" << endl
		<< "$;;;!!!:~::==*:;~-~~~~-~~~~:::;:;;:;!!***!*!!;!;~:;~:-:~ :~." << endl
		<< "--,!*!-!!:==!$#=:~--~-~~~~~;!;::;:;;!;;:!*$$=****;!~:,:=~;!*" << endl
		<< ",~;=*==-:~~~~:---~~~~~~~~~:~::::!;;!;!**!=**=*=**==$$!~;*!~:" << endl
		<< "~-!==#*;:::~~-~:**;::::~~~:~:::;;;;!!!***=*****=**===$**==!!" << endl
		<< ":--!$@=*;~-~!;;=$=;~:~~-~~~~:::::;:!!;!=*=**==*===!=$===*$==" << endl
		<< ":-~,:#*!$;~**$*==,=;;!-~--~:~:::::;!;;;!!**=********=***====" << endl
		<< ";;!;~;*=#=!!*=$=*--!!*~~~::;:;;:~;;:!;;*!;!**!!****==**===*=" << endl
		<< "!~;;;*#$##==$=#==~~*!::~:;;:;:;:~:;:;::;****==*!!:;*=*!*;***" << endl
		<< "*=*$$*$$@#=#;~~~:*$=:*;:;:!:;;;;!!;~;*;!!=$=*!==*!*===*;!!*=" << endl
		<< "=**=$#*#*!;;~-~~--~*;;!!:;;;;!;!;:;!!!!=*!!!*=**;:*=*===**==" << endl
		<< "=**==$$=!;;;~--~~--,--,~;*;;:;;!!;!;;!*=*!;!;***!!***$=====*" << endl
		<< "#$**$*==!;;;;,~--,,---;=**!!:;!!!!;;;;;!!*!*!!*!!!*===**!==!" << endl
		<< "==$!**$$*;!*,,---*:-~$$$$=!;!=***;;;::*;*!*****!;**;!**=:*==" << endl
		<< "$$$$##$!!$*;---~*=~!$$=!;~!:-;*!!!!;!!;*!**=*=**!***!*=**==*" << endl
		<< "#$$##$=*=$=---~!$!::;:::~-;!!=***;!!*!**=****==*=$=**=======" << endl
		<< "@@@#$****$=~~:;;;~--~~~!--;=#$==$***!*$=**;!*=**=========!;=" << endl;

		break;
		// 산
	case 3: // 가로 / 세로 = 1.5인 사진
		cout << "" << endl
			 << "" << endl
			 << "" << endl;
		break;
		// 산에 사는 몬스터
	case 4:
		cout<< "" << endl 
			<< "" << endl
			<< "" << endl;





		break;
		// 배드엔딩
	case 5:
		break;
		// 마을
	case 6:
		break;
		// 해피엔딩
	case 7:
		break;
		// 추가 사항?
	}
}

// 마을에 도착했나?
void IsTown() {
	if (roadIncount == 6) {
		Graphics(6);

		printf("\n============================================================\n");
		printf("길 끝에 마을이 보인다... \n");

		_getch();
		system("cls");

		Graphics(7);

		printf("\n============================================================\n");
		printf("당신은 마을에 정착했습니다 \n");

		_getch();
		system("cls");
	}

	roadIncount += 1;
}

// 전투할까?
void IsBattle() {
	const int BATTLERATE = 40;
	int isBattle = RandomPercent();

	printf("확률 : %d \n", isBattle);

	if (isBattle > MAXPERCENT - BATTLERATE) {
		Graphics(3);

		printf("\n============================================================\n");
		printf("옆 수풀에서 들개가 나타났다!!! \n");

		Battle();
	}
	else {
		Graphics(3);

		printf("\n============================================================\n");
		printf("무사히 지나갔다 \n");

		_getch();
		system("cls");
	}
}

// 힐할까?
void PlayerHeal() {
	const int HEALRATE = 60;
	const int HEALPOWER = 10;
	int isHeal = RandomPercent();

	printf("확률 : %d \n", isHeal);

	if (isHeal > MAXPERCENT - HEALRATE) {
		printf("신비한 힘이 나를 감싼다. \n");

		playerCurHp += HEALPOWER;
	}
	else {
		printf("\n");
	}
}

// 내가 가는 길
void RandomRoute() {
	const int ROADRATE = 30;
	const int RIVERRATE = 20;
	int myRoute = RandomPercent();

	if (myRoute > MAXPERCENT - ROADRATE) {
		Graphics(1);

		printf("\n============================================================\n");
		printf("잘 정비된 길이다 \n");
		printf("길을 만난 횟수 : %d \n", roadIncount);

		_getch();
		system("cls");

		IsTown();
	}
	else if (myRoute > MAXPERCENT - ROADRATE - RIVERRATE) {
		Graphics(2);

		printf("\n============================================================\n");
		printf("건널 만한 곳을 찾아야겠다 \n");

		_getch();
		system("cls");
	}
	else {
		Graphics(3);

		printf("\n============================================================\n");
		printf("밤이 되기 전에 지나가자 \n");

		_getch();
		system("cls");

		IsBattle();
	}
}

// 1 ~ 100까지의 난수 반환
int RandomPercent() {
	srand((unsigned int)time(NULL));

	printf("확률 : %d \n", (rand() % MAXPERCENT) + 1);

	return ((rand() % MAXPERCENT) + 1);
}

